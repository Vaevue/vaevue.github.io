(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{493:function(n,s,e){"use strict";e.r(s);var a=e(4),t=Object(a.a)({},(function(){var n=this,s=n.$createElement,e=n._self._c||s;return e("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[e("ul",[e("li",[n._v("这节我们就来看看Javascript中的浅拷贝和深拷贝")])]),n._v(" "),e("blockquote",[e("p",[n._v("所谓浅拷贝就是简单的拷贝对象的外层属性 不会拷贝引用类型")])]),n._v(" "),e("blockquote",[e("p",[n._v("深拷贝顾名思义就是拷贝目标对象的全部属性 拷贝的对象与被拷贝对象毫不相干")])]),n._v(" "),e("ul",[e("li",[n._v("浅拷贝的实现方式\n"),e("p",[n._v("1.Object.assign({},obj)  //使用字符串合并的方式拷贝对象")]),n._v(" "),e("p",[n._v("2.obj1 = {...obj2}   //利用展开运算符的方式拷贝对象")]),n._v(" "),e("p",[n._v("3.使用for循环的拷贝对象")])])]),n._v(" "),e("div",{staticClass:"language-html line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-html"}},[e("code",[n._v('let obj = {name : "zhangs"}\nlet newobj = {}\nfor(let key in obj ){\n    newobj[key] == obj[key]\n}\nnewobj  // {name : "zhangs"}\n')])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br")])]),e("ul",[e("li",[n._v("深拷贝的实现方式\n"),e("p",[n._v("1.JSON.parse(JSON.stringify(obj))")]),n._v(" "),e("p",[n._v("2.手写实现深拷贝")])])]),n._v(" "),e("div",{staticClass:"language-html line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-html"}},[e("code",[n._v("    function copy(obj){\n        let newobj = Array.isArray(obj) ? [] : {} \n        if(obj === null || obj != 'object'){\n             return obj \n        }else {\n            for(let key in obj ){\n                if(typeof obj[key] == 'object'){\n                    copy(obj[key])\n                }else {\n                    newobj[key] = obj[key]\n                }\n            }\n        }\n        return newobj\n    }\n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br"),e("span",{staticClass:"line-number"},[n._v("8")]),e("br"),e("span",{staticClass:"line-number"},[n._v("9")]),e("br"),e("span",{staticClass:"line-number"},[n._v("10")]),e("br"),e("span",{staticClass:"line-number"},[n._v("11")]),e("br"),e("span",{staticClass:"line-number"},[n._v("12")]),e("br"),e("span",{staticClass:"line-number"},[n._v("13")]),e("br"),e("span",{staticClass:"line-number"},[n._v("14")]),e("br"),e("span",{staticClass:"line-number"},[n._v("15")]),e("br")])]),e("blockquote",[e("p",[n._v("手写深拷贝的实现思路\n")]),e("p",[n._v("A.首先创建新的对象用来返回拷贝的对象 判断传入的对象是否是Array 如果是就默认[] 如果不是 就默认{}")]),n._v(" "),e("p",[n._v("B.然后判断传入的是null和不是对象 就直接返回传入的obj")]),n._v(" "),e("p",[n._v("C.for循环遍历判断每一项，看其中是否包含对象 如果包含了就递归调用函数")]),n._v(" "),e("p",[n._v("D.如果不包含对象就直接赋值")]),n._v(" "),e("p",[n._v("E.返回新对象")]),e("p")]),n._v(" "),e("h2",{attrs:{id:"总结"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[n._v("#")]),n._v(" 总结")]),n._v(" "),e("p",[n._v("浅拷贝和深拷贝的应用场景是在你需要改变对象的某个属性而又不想改变原对象时 可以使用深拷贝 拷贝出来一个对象 修改这个对象 就不会干扰到原对象")]),n._v(" "),e("hr")])}),[],!1,null,null,null);s.default=t.exports}}]);